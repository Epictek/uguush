#!/usr/bin/env bash
#
# poomf - command-line uploader for pomf.se and uguu.se
#

# by joe - js1 at openmailbox dot org
# refactored by arianon - arianon at openmailbox dot org

## CONFIGURATION

# Colors
N=$(tput sgr0)
R=$(tput setaf 1)
G=$(tput setaf 2)

# Screenshot utility
fshot="maim --hidecursor"
sshot="maim -s --hidecursor"
wshot="maim -i $(xprop -root _NET_ACTIVE_WINDOW | grep -o '0x.*') --hidecursor"

# Default screenshot name.
FILE=$(mktemp --suffix=.png)

# Default delay.
secs="0"

# Image host
ihost=pomf
hosts="pomf uguu teknik imgur"

# Insert your imgur api key here to be able to upload to imgur.
imgurAPI=null

## FUNCTIONS

depends() {
	if ! type curl &> /dev/null; then
		echo >&2 "Checking for curl... [${R}FAILED${N}]"
		echo "\`curl\` not found."
		exit 1
	fi
}

usage() {
	cat <<-HELP
	poomf - puush-like functionality for pomf.se and uguu.se

	Usage:
		$(basename "${0}") [options]

	Options:
		-d		 Delay the screenshot by the specified number of seconds.
		-h		 Show this help message.
		-f		 Take a fullscreen screenshot.
		-s		 Take a selection screenshot.
		-t		 Use HTTPS, if the host supports it.
		-u <file>  Upload a file
		-w		 Take a screenshot of the current window.
		-i		 Image host(pomf/uguu/teknik/imgur). If unspecified, pomf.
	HELP
}

delay() {
	for (( i=secs; i > 0; --i )) ; do
		echo "$i..."
		sleep 1
	done
}

screenshot() {
	if [ "${ful}" ]; then
		# Take fullscreen shot.
		${fshot} "${FILE}"
	elif [ "${sel}" ]; then
		# Take selection shot.
		${sshot} "${FILE}"
	elif [ "${win}" ]; then
		# Take window shot.
		${wshot} "${FILE}"
	fi
}

upload() {
	for (( i = 1; i <= 3; i++ )); do
		echo -n "Try #${i}... "

		# Upload file to selected host
		$ihost

		if [ "${?}" = 0 ]; then

			# Copy link to clipboard
			printf %s "${result}" | xclip -selection primary
			printf %s "${result}" | xclip -selection clipboard

			# Log url to file
			echo "$(date +"%D %R") | ${result}" >> ~/.pomfs.txt

			# Notify user of completion
			notify-send "pomf!" "${result}"

			# Output message to term
			echo "[${G}OK${N}]"
			echo "File has been uploaded: ${result}"

			# If we took a screenshot, remove the temporary file.
			if [ -z $upl ]; then
				rm $FILE
			fi

			exit
		else
			echo "[${R}FAILED${N}]"
		fi
	done
}

pomf() {
	if [ "${https}" ]; then
		result=$(curl -sf -F files[]="@${FILE}" "https://pomf.se/upload.php?output=gyazo")
	else
		result=$(curl -sf -F files[]="@${FILE}" "http://pomf.se/upload.php?output=gyazo")
	fi
}

uguu() {
	if [ "${https}" ]; then
		echo "[${R}FAILED${N}]"
		echo "Uguu.se doesn't support HTTPS yet."
		exit 1
	else
		result=$(curl -sf -F file="@${FILE}" "http://uguu.se/api.php?d=upload")
	fi
}

teknik() {
	if [ "${https}" ]; then
		result=$(curl -sf -F file="@${FILE}" https://api.teknik.io/upload/post)
	else
		echo "[${R}FAILED${N}]"
		echo "teknik.io uploading must be done with HTTPS(-t flag)"
		exit 1
	fi

	if [[ ! "${result}" =~ "error" ]]; then
		result="${result##*name\":\"}"
		result="${result%%\"*}"
		result="https://u.teknik.io/${result}"
	fi
}

imgur() {
	if [ "${https}" ]; then
		echo "[${R}FAILED${N}]"
		echo "imgur uploading must be done with HTTP(no -t flag)"
		exit 1
	else
		result=$(curl -sf -F "key=$imgurAPI" -H "Expect: " -F "image=@${FILE}" \
			http://imgur.com/api/upload.xml )
	fi

	if [ "${?}" = 0 ]; then
		result=$(echo $result | sed -r 's/.*<original_image>(.*)<\/original_image>.*/\1/')
	fi
}

## EXIT IF NO ARGUMENTS FOUND
if [ $# -lt 1 ]; then
	usage
	exit 1
fi

## PARSE OPTIONS
while getopts :d:fghstui:w opt; do
	case "${opt}" in
		d)
			# Set delay value.
			secs="${OPTARG}" ;;
		f)
			# Fullscreen.
			ful=true ;;
		s)
			# Take shot with selection.
			sel=true ;;
		t)
			# Use HTTPS
			https=true ;;
		u)
			# Change $FILE to the specified file with -u
			upl=true
						FILE="${OPTARG}" ;;
		w)
			# Take shot of current window.
						win=true ;;
		i)
			#Set host
			[[ "$hosts" =~ "${OPTARG}" ]] && ihost=${OPTARG} || exit 1 ;;
		h)
			# Show help and exit with EXIT_SUCCESS
			usage
			exit 0 ;;
		*)
			# Ditto, but with EXIT_FAILURE
			usage
			exit 1 ;;
	esac
done

## EXECUTE FUNCTIONS

depends
delay
screenshot
upload

# If the program doesn't exit at the for-loop, the upload failed.
echo "File was not uploaded, did you specify a valid filename?"
